name: Grafbase Release

on:
  workflow_call:
    inputs:
      draft:
        type: boolean
        required: true
      prerelease:
        type: boolean
        required: true
      tag:
        type: string
        required: true

    secrets:
      CRATES_ACCESS_TOKEN:
        required: true
      NPM_ACCESS_TOKEN:
        required: true

permissions:
  # Allow login to via OIDC
  id-token: write
  # Allow creating GitHub releases
  contents: write

jobs:
  release:
    name: Release grafbase
    runs-on: depot-ubuntu-24.04-small
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/install-rust
        with:
          target: x86_64-unknown-linux-musl

      - name: Parse version tag
        run: |
          VERSION_BUMP="${{ inputs.tag }}"
          VERSION_BUMP=${VERSION_BUMP//grafbase-} # remove the grafbase prefix from the tag
          echo VERSION_BUMP=${VERSION_BUMP} >> $GITHUB_ENV

      - name: Announce release attempt on Slack
        uses: ravsamhq/notify-slack-action@be814b201e233b2dc673608aa46e5447c8ab13f2 # v2
        with:
          notification_title: '({workflow}) grafbase release for ${{ env.VERSION_BUMP }} started'
          footer: '<{run_url}|View Run>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # This is annoying, but github doesn't pass env vars down to child workflows,
      # and you can't use them as input parameters either so lets read them out the
      # YAML
      - name: Get PROD_ASSETS from binaries workflow
        id: lookup-prod-assets
        uses: mikefarah/yq@de2f77b49cbd40fd67031ee602245d0acc4ac482 # master
        with:
          cmd: yq '.env.PROD_ASSETS' './.github/workflows/binaries.yml'

      - name: Download darwin-aarch64 artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.VERSION_BUMP }}-aarch64-apple-darwin
          path: cli/npm/aarch64-apple-darwin

      - name: Download Linux AMD artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.VERSION_BUMP }}-linux
          path: cli/npm/x86_64-unknown-linux-musl

      - name: Download Linux ARM artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.VERSION_BUMP }}-linux-arm
          path: cli/npm/aarch64-unknown-linux-musl

      - name: Download windows artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.VERSION_BUMP }}-x86_64-pc-windows-msvc
          path: cli/npm/x86_64-pc-windows-msvc

      - name: Process artifacts
        shell: bash
        run: |
          cd cli/npm
          mkdir github
          cp aarch64-apple-darwin/grafbase github/grafbase-aarch64-apple-darwin
          cp x86_64-pc-windows-msvc/grafbase.exe github/grafbase-x86_64-pc-windows-msvc.exe
          cp x86_64-unknown-linux-musl/grafbase github/grafbase-x86_64-unknown-linux-musl
          cp aarch64-unknown-linux-musl/grafbase github/grafbase-aarch64-unknown-linux-musl

          chmod +x aarch64-apple-darwin/grafbase
          chmod +x x86_64-unknown-linux-musl/grafbase
          chmod +x aarch64-unknown-linux-musl/grafbase

      - name: Install cargo-binstall and cargo-about
        shell: bash
        run: |
          curl -LsSf https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
          cargo binstall --no-symlinks --no-confirm cargo-about

      - name: Generate licenses
        shell: bash
        run: |
          cargo about generate -c cli/about.toml -o "licenses.html" cli/about.hbs
          find cli/npm -maxdepth 1 -type d -exec cp cli/licenses.html {} \;

      - name: Github release
        id: gh-release-grafbase
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2
        with:
          body_path: cli/changelog/${{ env.VERSION_BUMP }}.md
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            licenses.html
            cli/npm/github/grafbase-aarch64-apple-darwin
            cli/npm/github/grafbase-x86_64-pc-windows-msvc.exe
            cli/npm/github/grafbase-x86_64-unknown-linux-musl
            cli/npm/github/grafbase-aarch64-unknown-linux-musl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::071269490873:role/openid-github-ci-grafbase
          role-session-name: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.job }}-github-ci
          aws-region: us-east-1

      - name: Upload CLI install script to S3
        shell: bash
        env:
          INPUT_PRERELEASE: ${{ inputs.prerelease && 'true' || 'false' }}
        run: |
          if [[ $INPUT_PRERELEASE == "false" ]]; then
            cd cli/install
            sed -i 's/{{LATEST_VERSION}}/${{ env.VERSION_BUMP }}/g' cli
            aws s3 cp cli s3://downloads-071269490873/install/cli
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v5

      - name: Publish npm
        shell: bash
        env:
          INPUT_PRERELEASE: ${{ inputs.prerelease && 'true' || 'false' }}
        run: |
          npm set "//registry.npmjs.org/:_authToken" ${{ secrets.NPM_ACCESS_TOKEN }}
          cd cli/npm
          PUBLISH_ARGUMENTS=()
          if [[ $INPUT_PRERELEASE != "false" ]]; then
              echo "Running prerelease: $INPUT_PRERELEASE"
              PUBLISH_ARGUMENTS+=(--tag next)
          fi
          (cd aarch64-apple-darwin && npm publish "${PUBLISH_ARGUMENTS[@]}")
          (cd x86_64-pc-windows-msvc && npm publish "${PUBLISH_ARGUMENTS[@]}")
          (cd x86_64-unknown-linux-musl && npm publish "${PUBLISH_ARGUMENTS[@]}")
          (cd aarch64-unknown-linux-musl && npm publish "${PUBLISH_ARGUMENTS[@]}")
          (cd cli && npm publish "${PUBLISH_ARGUMENTS[@]}")
